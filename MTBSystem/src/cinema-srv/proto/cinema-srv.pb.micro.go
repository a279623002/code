// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cinema-srv.proto

package cinema

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Cinema service

func NewCinemaEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Cinema service

type CinemaService interface {
	// 地点影城
	LocationCinema(ctx context.Context, in *LocationCinemaReq, opts ...client.CallOption) (*LocationCinemaRsp, error)
	// 根据位置查看有销售对应电影的影院信息
	// rpc GetCinemaMessage(GetCinemaMessageReq) returns(GetCinemaMessageRsp) {}
	// 根据id查看影院的信息和即将上映的影片信息
	GetCinemaMessageByCid(ctx context.Context, in *GetCinemaMessageByCidReq, opts ...client.CallOption) (*GetCinemaMessageByCidRsp, error)
	// 根据mh_id获取影厅信息
	GetMovieHallByMHId(ctx context.Context, in *GetMovieHallByMHIdReq, opts ...client.CallOption) (*GetMovieHallByMHIdRsp, error)
}

type cinemaService struct {
	c    client.Client
	name string
}

func NewCinemaService(name string, c client.Client) CinemaService {
	return &cinemaService{
		c:    c,
		name: name,
	}
}

func (c *cinemaService) LocationCinema(ctx context.Context, in *LocationCinemaReq, opts ...client.CallOption) (*LocationCinemaRsp, error) {
	req := c.c.NewRequest(c.name, "Cinema.LocationCinema", in)
	out := new(LocationCinemaRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) GetCinemaMessageByCid(ctx context.Context, in *GetCinemaMessageByCidReq, opts ...client.CallOption) (*GetCinemaMessageByCidRsp, error) {
	req := c.c.NewRequest(c.name, "Cinema.GetCinemaMessageByCid", in)
	out := new(GetCinemaMessageByCidRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) GetMovieHallByMHId(ctx context.Context, in *GetMovieHallByMHIdReq, opts ...client.CallOption) (*GetMovieHallByMHIdRsp, error) {
	req := c.c.NewRequest(c.name, "Cinema.GetMovieHallByMHId", in)
	out := new(GetMovieHallByMHIdRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cinema service

type CinemaHandler interface {
	// 地点影城
	LocationCinema(context.Context, *LocationCinemaReq, *LocationCinemaRsp) error
	// 根据位置查看有销售对应电影的影院信息
	// rpc GetCinemaMessage(GetCinemaMessageReq) returns(GetCinemaMessageRsp) {}
	// 根据id查看影院的信息和即将上映的影片信息
	GetCinemaMessageByCid(context.Context, *GetCinemaMessageByCidReq, *GetCinemaMessageByCidRsp) error
	// 根据mh_id获取影厅信息
	GetMovieHallByMHId(context.Context, *GetMovieHallByMHIdReq, *GetMovieHallByMHIdRsp) error
}

func RegisterCinemaHandler(s server.Server, hdlr CinemaHandler, opts ...server.HandlerOption) error {
	type cinema interface {
		LocationCinema(ctx context.Context, in *LocationCinemaReq, out *LocationCinemaRsp) error
		GetCinemaMessageByCid(ctx context.Context, in *GetCinemaMessageByCidReq, out *GetCinemaMessageByCidRsp) error
		GetMovieHallByMHId(ctx context.Context, in *GetMovieHallByMHIdReq, out *GetMovieHallByMHIdRsp) error
	}
	type Cinema struct {
		cinema
	}
	h := &cinemaHandler{hdlr}
	return s.Handle(s.NewHandler(&Cinema{h}, opts...))
}

type cinemaHandler struct {
	CinemaHandler
}

func (h *cinemaHandler) LocationCinema(ctx context.Context, in *LocationCinemaReq, out *LocationCinemaRsp) error {
	return h.CinemaHandler.LocationCinema(ctx, in, out)
}

func (h *cinemaHandler) GetCinemaMessageByCid(ctx context.Context, in *GetCinemaMessageByCidReq, out *GetCinemaMessageByCidRsp) error {
	return h.CinemaHandler.GetCinemaMessageByCid(ctx, in, out)
}

func (h *cinemaHandler) GetMovieHallByMHId(ctx context.Context, in *GetMovieHallByMHIdReq, out *GetMovieHallByMHIdRsp) error {
	return h.CinemaHandler.GetMovieHallByMHId(ctx, in, out)
}
