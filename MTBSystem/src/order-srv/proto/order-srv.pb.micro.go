// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order-srv.proto

package order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Order service

func NewOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Order service

type OrderService interface {
	// 想看
	WantTicket(ctx context.Context, in *WantTicketReq, opts ...client.CallOption) (*WantTicketRsp, error)
	// 下单
	Ticket(ctx context.Context, in *TicketReq, opts ...client.CallOption) (*TicketRsp, error)
	// 支付
	PayOrder(ctx context.Context, in *PayOrderReq, opts ...client.CallOption) (*PayOrderRsp, error)
	// 取消订单
	UndoOrder(ctx context.Context, in *UndoOrderReq, opts ...client.CallOption) (*UndoOrderRsp, error)
	// 根据订单编号获取电影票具体信息
	GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, opts ...client.CallOption) (*GetOrderMessageRsp, error)
	// 查看所有电影票
	LookOrders(ctx context.Context, in *LookOrdersReq, opts ...client.CallOption) (*LookOrdersRsp, error)
	// 查看所有看过的电影票
	LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, opts ...client.CallOption) (*LookAlreadyOrdersRsp, error)
	// 进行评分
	OrderComment(ctx context.Context, in *OrderCommentReq, opts ...client.CallOption) (*OrderCommentRsp, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) WantTicket(ctx context.Context, in *WantTicketReq, opts ...client.CallOption) (*WantTicketRsp, error) {
	req := c.c.NewRequest(c.name, "Order.WantTicket", in)
	out := new(WantTicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Ticket(ctx context.Context, in *TicketReq, opts ...client.CallOption) (*TicketRsp, error) {
	req := c.c.NewRequest(c.name, "Order.Ticket", in)
	out := new(TicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) PayOrder(ctx context.Context, in *PayOrderReq, opts ...client.CallOption) (*PayOrderRsp, error) {
	req := c.c.NewRequest(c.name, "Order.PayOrder", in)
	out := new(PayOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UndoOrder(ctx context.Context, in *UndoOrderReq, opts ...client.CallOption) (*UndoOrderRsp, error) {
	req := c.c.NewRequest(c.name, "Order.UndoOrder", in)
	out := new(UndoOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, opts ...client.CallOption) (*GetOrderMessageRsp, error) {
	req := c.c.NewRequest(c.name, "Order.GetOrderMessage", in)
	out := new(GetOrderMessageRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) LookOrders(ctx context.Context, in *LookOrdersReq, opts ...client.CallOption) (*LookOrdersRsp, error) {
	req := c.c.NewRequest(c.name, "Order.LookOrders", in)
	out := new(LookOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, opts ...client.CallOption) (*LookAlreadyOrdersRsp, error) {
	req := c.c.NewRequest(c.name, "Order.LookAlreadyOrders", in)
	out := new(LookAlreadyOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) OrderComment(ctx context.Context, in *OrderCommentReq, opts ...client.CallOption) (*OrderCommentRsp, error) {
	req := c.c.NewRequest(c.name, "Order.OrderComment", in)
	out := new(OrderCommentRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	// 想看
	WantTicket(context.Context, *WantTicketReq, *WantTicketRsp) error
	// 下单
	Ticket(context.Context, *TicketReq, *TicketRsp) error
	// 支付
	PayOrder(context.Context, *PayOrderReq, *PayOrderRsp) error
	// 取消订单
	UndoOrder(context.Context, *UndoOrderReq, *UndoOrderRsp) error
	// 根据订单编号获取电影票具体信息
	GetOrderMessage(context.Context, *GetOrderMessageReq, *GetOrderMessageRsp) error
	// 查看所有电影票
	LookOrders(context.Context, *LookOrdersReq, *LookOrdersRsp) error
	// 查看所有看过的电影票
	LookAlreadyOrders(context.Context, *LookAlreadyOrdersReq, *LookAlreadyOrdersRsp) error
	// 进行评分
	OrderComment(context.Context, *OrderCommentReq, *OrderCommentRsp) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		WantTicket(ctx context.Context, in *WantTicketReq, out *WantTicketRsp) error
		Ticket(ctx context.Context, in *TicketReq, out *TicketRsp) error
		PayOrder(ctx context.Context, in *PayOrderReq, out *PayOrderRsp) error
		UndoOrder(ctx context.Context, in *UndoOrderReq, out *UndoOrderRsp) error
		GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, out *GetOrderMessageRsp) error
		LookOrders(ctx context.Context, in *LookOrdersReq, out *LookOrdersRsp) error
		LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, out *LookAlreadyOrdersRsp) error
		OrderComment(ctx context.Context, in *OrderCommentReq, out *OrderCommentRsp) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) WantTicket(ctx context.Context, in *WantTicketReq, out *WantTicketRsp) error {
	return h.OrderHandler.WantTicket(ctx, in, out)
}

func (h *orderHandler) Ticket(ctx context.Context, in *TicketReq, out *TicketRsp) error {
	return h.OrderHandler.Ticket(ctx, in, out)
}

func (h *orderHandler) PayOrder(ctx context.Context, in *PayOrderReq, out *PayOrderRsp) error {
	return h.OrderHandler.PayOrder(ctx, in, out)
}

func (h *orderHandler) UndoOrder(ctx context.Context, in *UndoOrderReq, out *UndoOrderRsp) error {
	return h.OrderHandler.UndoOrder(ctx, in, out)
}

func (h *orderHandler) GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, out *GetOrderMessageRsp) error {
	return h.OrderHandler.GetOrderMessage(ctx, in, out)
}

func (h *orderHandler) LookOrders(ctx context.Context, in *LookOrdersReq, out *LookOrdersRsp) error {
	return h.OrderHandler.LookOrders(ctx, in, out)
}

func (h *orderHandler) LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, out *LookAlreadyOrdersRsp) error {
	return h.OrderHandler.LookAlreadyOrders(ctx, in, out)
}

func (h *orderHandler) OrderComment(ctx context.Context, in *OrderCommentReq, out *OrderCommentRsp) error {
	return h.OrderHandler.OrderComment(ctx, in, out)
}
