// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: module/v1/module.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Module_CreateModule_FullMethodName = "/api.module.v1.Module/CreateModule"
	Module_UpdateModule_FullMethodName = "/api.module.v1.Module/UpdateModule"
	Module_DeleteModule_FullMethodName = "/api.module.v1.Module/DeleteModule"
	Module_GetModule_FullMethodName    = "/api.module.v1.Module/GetModule"
	Module_ListModule_FullMethodName   = "/api.module.v1.Module/ListModule"
)

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleClient interface {
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleReply, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleReply, error)
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleReply, error)
	GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleReply, error)
	ListModule(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (*ListModuleReply, error)
}

type moduleClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleClient(cc grpc.ClientConnInterface) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleReply, error) {
	out := new(CreateModuleReply)
	err := c.cc.Invoke(ctx, Module_CreateModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleReply, error) {
	out := new(UpdateModuleReply)
	err := c.cc.Invoke(ctx, Module_UpdateModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleReply, error) {
	out := new(DeleteModuleReply)
	err := c.cc.Invoke(ctx, Module_DeleteModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) GetModule(ctx context.Context, in *GetModuleRequest, opts ...grpc.CallOption) (*GetModuleReply, error) {
	out := new(GetModuleReply)
	err := c.cc.Invoke(ctx, Module_GetModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) ListModule(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (*ListModuleReply, error) {
	out := new(ListModuleReply)
	err := c.cc.Invoke(ctx, Module_ListModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServer is the server API for Module service.
// All implementations must embed UnimplementedModuleServer
// for forward compatibility
type ModuleServer interface {
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleReply, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleReply, error)
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleReply, error)
	GetModule(context.Context, *GetModuleRequest) (*GetModuleReply, error)
	ListModule(context.Context, *PageInfoRequest) (*ListModuleReply, error)
	mustEmbedUnimplementedModuleServer()
}

// UnimplementedModuleServer must be embedded to have forward compatible implementations.
type UnimplementedModuleServer struct {
}

func (UnimplementedModuleServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedModuleServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedModuleServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedModuleServer) GetModule(context.Context, *GetModuleRequest) (*GetModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModule not implemented")
}
func (UnimplementedModuleServer) ListModule(context.Context, *PageInfoRequest) (*ListModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModule not implemented")
}
func (UnimplementedModuleServer) mustEmbedUnimplementedModuleServer() {}

// UnsafeModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServer will
// result in compilation errors.
type UnsafeModuleServer interface {
	mustEmbedUnimplementedModuleServer()
}

func RegisterModuleServer(s grpc.ServiceRegistrar, srv ModuleServer) {
	s.RegisterService(&Module_ServiceDesc, srv)
}

func _Module_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_GetModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).GetModule(ctx, req.(*GetModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_ListModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).ListModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_ListModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).ListModule(ctx, req.(*PageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Module_ServiceDesc is the grpc.ServiceDesc for Module service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Module_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.module.v1.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _Module_CreateModule_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _Module_UpdateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _Module_DeleteModule_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _Module_GetModule_Handler,
		},
		{
			MethodName: "ListModule",
			Handler:    _Module_ListModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/v1/module.proto",
}
