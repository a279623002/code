// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: comment-srv.proto

package comment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Comment service

func NewCommentEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Comment service

type CommentService interface {
	// 精彩影评
	HotComment(ctx context.Context, in *HotCommentReq, opts ...client.CallOption) (*HotCommentRsp, error)
	// 进行评论
	MakeComment(ctx context.Context, in *MakeCommentReq, opts ...client.CallOption) (*MakeCommentRsp, error)
	// 评论up
	UpNumComment(ctx context.Context, in *UpNumCommentReq, opts ...client.CallOption) (*UpNumCommentRsp, error)
	// 我的评论
	MyComments(ctx context.Context, in *MyCommentsReq, opts ...client.CallOption) (*MyCommentsRsp, error)
	// 删除评论
	DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...client.CallOption) (*DeleteCommentRsp, error)
}

type commentService struct {
	c    client.Client
	name string
}

func NewCommentService(name string, c client.Client) CommentService {
	return &commentService{
		c:    c,
		name: name,
	}
}

func (c *commentService) HotComment(ctx context.Context, in *HotCommentReq, opts ...client.CallOption) (*HotCommentRsp, error) {
	req := c.c.NewRequest(c.name, "Comment.HotComment", in)
	out := new(HotCommentRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentService) MakeComment(ctx context.Context, in *MakeCommentReq, opts ...client.CallOption) (*MakeCommentRsp, error) {
	req := c.c.NewRequest(c.name, "Comment.MakeComment", in)
	out := new(MakeCommentRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentService) UpNumComment(ctx context.Context, in *UpNumCommentReq, opts ...client.CallOption) (*UpNumCommentRsp, error) {
	req := c.c.NewRequest(c.name, "Comment.UpNumComment", in)
	out := new(UpNumCommentRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentService) MyComments(ctx context.Context, in *MyCommentsReq, opts ...client.CallOption) (*MyCommentsRsp, error) {
	req := c.c.NewRequest(c.name, "Comment.MyComments", in)
	out := new(MyCommentsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentService) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...client.CallOption) (*DeleteCommentRsp, error) {
	req := c.c.NewRequest(c.name, "Comment.DeleteComment", in)
	out := new(DeleteCommentRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Comment service

type CommentHandler interface {
	// 精彩影评
	HotComment(context.Context, *HotCommentReq, *HotCommentRsp) error
	// 进行评论
	MakeComment(context.Context, *MakeCommentReq, *MakeCommentRsp) error
	// 评论up
	UpNumComment(context.Context, *UpNumCommentReq, *UpNumCommentRsp) error
	// 我的评论
	MyComments(context.Context, *MyCommentsReq, *MyCommentsRsp) error
	// 删除评论
	DeleteComment(context.Context, *DeleteCommentReq, *DeleteCommentRsp) error
}

func RegisterCommentHandler(s server.Server, hdlr CommentHandler, opts ...server.HandlerOption) error {
	type comment interface {
		HotComment(ctx context.Context, in *HotCommentReq, out *HotCommentRsp) error
		MakeComment(ctx context.Context, in *MakeCommentReq, out *MakeCommentRsp) error
		UpNumComment(ctx context.Context, in *UpNumCommentReq, out *UpNumCommentRsp) error
		MyComments(ctx context.Context, in *MyCommentsReq, out *MyCommentsRsp) error
		DeleteComment(ctx context.Context, in *DeleteCommentReq, out *DeleteCommentRsp) error
	}
	type Comment struct {
		comment
	}
	h := &commentHandler{hdlr}
	return s.Handle(s.NewHandler(&Comment{h}, opts...))
}

type commentHandler struct {
	CommentHandler
}

func (h *commentHandler) HotComment(ctx context.Context, in *HotCommentReq, out *HotCommentRsp) error {
	return h.CommentHandler.HotComment(ctx, in, out)
}

func (h *commentHandler) MakeComment(ctx context.Context, in *MakeCommentReq, out *MakeCommentRsp) error {
	return h.CommentHandler.MakeComment(ctx, in, out)
}

func (h *commentHandler) UpNumComment(ctx context.Context, in *UpNumCommentReq, out *UpNumCommentRsp) error {
	return h.CommentHandler.UpNumComment(ctx, in, out)
}

func (h *commentHandler) MyComments(ctx context.Context, in *MyCommentsReq, out *MyCommentsRsp) error {
	return h.CommentHandler.MyComments(ctx, in, out)
}

func (h *commentHandler) DeleteComment(ctx context.Context, in *DeleteCommentReq, out *DeleteCommentRsp) error {
	return h.CommentHandler.DeleteComment(ctx, in, out)
}
